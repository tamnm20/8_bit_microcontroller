/****************************************************************************
* NAME: main.c
*----------------------------------------------------------------------------
* Copyright (c) MCNEX Inc.
*----------------------------------------------------------------------------
* CREATED_BY: Jung Gu Seo
* CREATION_DATE: 2011/03/14
* $Author: dglee $
* $Revision: 1.0 $
* $Date: 2011/03/14 $
*----------------------------------------------------------------------------
* PURPOSE:
* - 
*****************************************************************************/

/*_____ I N C L U D E __________________________________________*/
/*_____ I N C L U D E __________________________________________*/
#include "compiler_defs.h"
#include "C8051F580_defs.h"
#include "global_define.h"
#include "mgr_mcu.h"
#include "mgr_diag.h"
#include "drv_timer.h"
#include "drv_mcu.h"
#include "drv_mem.h"
#include "drv_adc.h"
#include "desc.h"
#include "nm_basic.h"
#include "il_inc.h"
typedef vuint8_least DescSvcInstIndex;
extern DescSetState(DescSvcInstIndex svcInstHandle);
/*--------------------------------------------------------------*/
extern DescOemCommControlInfo  g_descCommControlInfo;
void	main(void);

SEG_XDATA U8 App_FW_Valid = 0x00U;
extern void START_APPLICATION(void);   // Function prototype for app's Reset
SEG_XDATA U8 pin_buf[8];
SEG_XDATA U8 IGN_Time_Out = 0x00;
extern SEG_XDATA volatile U32 IGN_value;

INTERRUPT_PROTO (Timer2_ISR, INTERRUPT_TIMER2);
/*****************************************************************************
FUNCTION:
  - main

Purpose:
  - 
*****************************************************************************/

void main(void)
{ 
	SEG_XDATA volatile U8 buf;
	U8 Reserved_Address;
	SEG_XDATA volatile U8 In_Mode = 0x00U;
	SEG_XDATA volatile U8 On_Time;
	DescStateGroup          checkSessionState;
	DescSvcInstIndex        reqSvcInstHandle;

	PSW |= 0x02;	
	Init_McuTask();
	//MCU_SENSOR_RESET = 0x01U;
	EA = (U8)1;
	Wait_ms(100U);
	
	In_Mode = 0x00U;
	
	if (In_Mode == 0x01)
	{
		// If the signature is invalid, force bootloader mode.
		PSW |= 0x02;
		Spi_Init();	
		//MCU_SENSOR_RESET = 0x00U;
		//MCU_MCLK_ENABLE = 0x00U;
	}
	else
	{
		PSW = PSW & ~(0x02);
		START_APPLICATION();         // Jump to Application FW
	}

	Delay_Time_Set(TID_VCAN,DT_VCAN);
	VCan_Init();
	VCan_Start();

	checkSessionState = kDescStateSessionExtendedDiagnosticMode;
	DescSetStateSession(checkSessionState);
	checkSessionState = kDescStateSessionECUProgrammingMode;
	DescSetStateSession(checkSessionState);
	checkSessionState = kDescStateSecurityAccessUnlockedL1;
	DescSetStateSecurityAccess(checkSessionState);

	while(1)
	{
		On_Time = Delay_Time_Get(TID_VCAN);
		if ( On_Time == TRUE )
		{	
			VCan_Task();
		}
		On_Time = Delay_Time_Get(TID_DIAG_ECU_RESET);
		if ( On_Time == TRUE)
		{
			RSTSRC = 0x12U;
		}
	}
}


INTERRUPT(TIMER2_ISR, INTERRUPT_TIMER2)
{
	SEG_XDATA U8 i = 0x00U;
	TF2H = 0x00U;

	g_Global_Tick_Msg.Tick_1ms++;
	if ( g_Global_Tick_Msg.Over_Set == FALSE)
	{
		if ( g_Global_Tick_Msg.Tick_1ms >= 0xFFFFU )
		{
			if ( g_Global_Tick_Msg.Tick_1ms >= g_Global_Tick_Msg.Limit )
			{
				g_Global_Tick_Msg.Tick_1ms = (U32)0;
				for ( i = (U8)0; i <= TID_COUNT; i++)
				{
					ga_tCAN_Time_Msg[i].End_Time = (U32)0;
				}				
			}
			else
			{
				g_Global_Tick_Msg.Over_Set = TRUE;
				g_Global_Tick_Msg.Limit = g_Global_Tick_Msg.Limit - 0xFFFFU;
			}
		}
	}
	else
	{
		g_Global_Tick_Msg.Limit--;
		if ( g_Global_Tick_Msg.Limit <= (U8)0 )
		{
			g_Global_Tick_Msg.Tick_1ms = (U16)0;
			g_Global_Tick_Msg.Over_Set = FALSE;
			for ( i = 0; i <= TID_COUNT; i++)
			{
				ga_tCAN_Time_Msg[i].End_Time -= ga_tCAN_Time_Msg[i].Cur_Time;
			}
		}
	}
}
/* end of file */
