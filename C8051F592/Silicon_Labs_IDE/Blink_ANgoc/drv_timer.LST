C51 COMPILER V9.51   DRV_TIMER                                                             10/30/2023 13:21:21 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE DRV_TIMER
OBJECT MODULE PLACED IN drv_timer.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe drv_timer.c DB OE BR INTVECTOR(0X4000) INCDIR(c:\SiLabs\MCU\Inc)

line level    source

   1          #include "compiler_defs.h"
   2          #include "C8051F580_defs.h"
   3          #include "Global_Define.h"
   4          #include "drv_timer.h"
   5          
   6          SEG_XDATA tMsg_Global_Tick      g_Global_Tick_Msg;
   7          SEG_XDATA tMsg_Time_s           ga_tCAN_Time_Msg[TID_COUNT];
   8          
   9          void Global_Timer_Init(void)
  10          {
  11   1              U8 i = 0U;
  12   1              g_Global_Tick_Msg.Tick_1ms = (U32)0;
  13   1              g_Global_Tick_Msg.Limit = (U32)0;
  14   1              g_Global_Tick_Msg.Over_Set = (U8)0;
  15   1      
  16   1              for( i = 0U; i < TID_COUNT; i++)
  17   1              {
  18   2                      ga_tCAN_Time_Msg[i].Set                 = 0;
  19   2                      ga_tCAN_Time_Msg[i].Delay_Time  = 0;
  20   2                      ga_tCAN_Time_Msg[i].Cur_Time    = 0;
  21   2                      ga_tCAN_Time_Msg[i].End_Time    = 0;
  22   2              }
  23   1              
  24   1      #if defined(TIMER0)
                      Timer0_Init();
              #endif
  27   1      #if defined(TIMER1)
                      Timer1_Init();
              #endif
  30   1      #if defined(TIMER2)
  31   1              Timer2_Init();
  32   1      #endif
  33   1      #if defined(TIMER3)
                      Timer3_Init();
              #endif
  36   1      #if defined(TIMER4)
                      Timer4_Init();
              #endif
  39   1      #if defined(TIMER5)
                      Timer5_Init();
              #endif
  42   1      }
  43          
  44          #if defined(TIMER0)
              void Timer0_Init()
              {
              }
              #endif
  49          
  50          #if defined(TIMER1)
              void Timer1_Init (void)
              {
                      SEG_XDATA U8 SFRPAGE_save = SFRPAGE;
                      SFRPAGE = ACTIVE_PAGE;
              
C51 COMPILER V9.51   DRV_TIMER                                                             10/30/2023 13:21:21 PAGE 2   

              // Make sure the Timer can produce the appropriate frequency in 8-bit mode
              // Supported SMBus Frequencies range from 10kHz to 100kHz.  The CKCON register
              // settings may need to change for frequencies outside this range.
                      CKCON |= (U8)0x08;                   // Timer1 clock source = SYSCLK
              
                      TMOD = 0x20U;                        // Timer1 in 8-bit auto-reload mode
              
                 // Timer1 configured to overflow at 1/3 the rate defined by SMB_FREQUENCY
                      TH1 = 0xECU;//-(S8)(SYSCLK/SMB_FREQUENCY/3);400KHz
              //      TH1 = 0xB0U;//100Khz
              
                      TL1 = TH1;                          // Init Timer1
              
                      TR1 = 0x01U;                            // Timer1 enabled
              
                      SFRPAGE = SFRPAGE_save;
              }
              #endif
  74          
  75          #if defined(TIMER2)
  76          void Timer2_Init (void)
  77          {
  78   1              SEG_XDATA U8 SFRPAGE_save = SFRPAGE;
  79   1         SFRPAGE = ACTIVE_PAGE;
  80   1      
  81   1         TMR2CN  = 0x00U;                    // Stop Timer2; Clear TF2;
  82   1                                             // use SYSCLK/12 as timebase 500ns unit
  83   1         CKCON  &= (U8)(~0x60U);             // Timer2 clocked based on T2XCLK;
  84   1      
  85   1      //   TMR2RL  = 0xB1E0U;           // Init reload values//for 10ms -20000
  86   1         TMR2RL  = 0xF830U;           // Init reload values//for 1ms  -2000
  87   1         
  88   1         TMR2    = 0xFFFFU;                   // Set to reload immediately
  89   1         ET2     = 0x01U;                     // Enable Timer2 interrupts
  90   1         TR2     = 0x01U;                     // Start Timer2
  91   1      
  92   1         SFRPAGE = SFRPAGE_save;
  93   1      }
  94          #endif
  95          
  96          #if defined(TIMER3)
              void Timer3_Init(void)
              {
                      SEG_XDATA U8 SFRPAGE_save = SFRPAGE;
                 SFRPAGE = ACTIVE_PAGE;
              
                 TMR3CN = 0x00U;                      // Timer3 configured for 16-bit auto-
                                                     // reload, low-byte interrupt disabled
              
                 CKCON &= (U8)(~0x40U);                     // Timer3 uses SYSCLK/12
              
                 TMR3RL = 0x3CB0U;//-(S16)(SYSCLK/12/40);      // Timer3 configured to overflow after
                 TMR3 = TMR3RL;                      // ~25ms (for SMBus low timeout detect):
                                                     // 1/.025 = 40
              
                 EIE1 |= (U8)0x40;                       // Timer3 interrupt enable
                 TMR3CN |= (U8)0x04;                     // Start Timer3
              
                 SFRPAGE = SFRPAGE_save;
              }
              #endif
 117          
C51 COMPILER V9.51   DRV_TIMER                                                             10/30/2023 13:21:21 PAGE 3   

 118          #if defined(TIMER4)
              void Timer4_Init()
              {
              }
              #endif
 123          
 124          #if defined(TIMER5)
              void Timer5_Init(void)
              {
                  SFRPAGE   = ACTIVE2_PAGE;
                  TMR5CN    = 0x04U;
                  TMR5CF    = 0x0AU;
                  TMR5CAPL  = 0x6AU;
                  TMR5CAPH  = 0xFFU;
                  SFRPAGE   = ACTIVE_PAGE;
              }
              #endif
 135          
 136          void Delay_Time_Set(U8 ID, U16 Delay_Time)
 137          {
 138   1              SEG_XDATA volatile U8 Set_Delay_Time = 0x00U;
 139   1      
 140   1              ga_tCAN_Time_Msg[ID].Cur_Time = g_Global_Tick_Msg.Tick_1ms;
 141   1              ga_tCAN_Time_Msg[ID].Delay_Time = (U32)Delay_Time;
 142   1              ga_tCAN_Time_Msg[ID].Set = TRUE;
 143   1      
 144   1              ga_tCAN_Time_Msg[ID].End_Time = (ga_tCAN_Time_Msg[ID].Cur_Time + ga_tCAN_Time_Msg[ID].Delay_Time);
 145   1              if ( (g_Global_Tick_Msg.Over_Set == FALSE) && (g_Global_Tick_Msg.Limit <= ga_tCAN_Time_Msg[ID].End_Time) 
             -)
 146   1              {
 147   2                      g_Global_Tick_Msg.Limit = ga_tCAN_Time_Msg[ID].End_Time;
 148   2              }
 149   1      }
 150          
 151          U8 Delay_Time_Get(U8 ID)
 152          {
 153   1              U8 ret = (U8)0;
 154   1              U8 i   = (U8)0;
 155   1              U8 cnt = (U8)0;
 156   1      
 157   1              ga_tCAN_Time_Msg[ID].Cur_Time = g_Global_Tick_Msg.Tick_1ms;
 158   1              if (ga_tCAN_Time_Msg[ID].Set == TRUE )
 159   1              {
 160   2                      if( ga_tCAN_Time_Msg[ID].Cur_Time >= ga_tCAN_Time_Msg[ID].End_Time )
 161   2                      {
 162   3                              Delay_Time_Set(ID,(U16)ga_tCAN_Time_Msg[ID].Delay_Time);
 163   3                              ret = TRUE;
 164   3                      }
 165   2              }
 166   1              return ret;
 167   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    552    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     35       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.51   DRV_TIMER                                                             10/30/2023 13:21:21 PAGE 4   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
