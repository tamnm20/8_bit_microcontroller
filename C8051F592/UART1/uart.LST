C51 COMPILER V9.60.7.0   UART                                                              01/12/2024 16:21:22 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN uart.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe uart.c DB OE BR INTVECTOR(0X4000) INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F580_UART1_STDIO.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2008 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // This program demonstrates how to configure the C8051F580 to use routines
  10          // in STDIO.h to write to and read from the UART interface.  The program
  11          // reads a character using the STDIO routine getkey(), outputs that character
  12          // to the screen, and then outputs the ASCII hex value of that character.
  13          //
  14          //
  15          // How To Test:
  16          //
  17          // 1) Ensure that jumpers are placed on J? of the C8051F580 target board
  18          //    that connect P0.4 to the TX signal, and P0.5 to the RX field.
  19          // 2) Connect USB cable from the development board to a PC
  20          // 3) Specify the target baudrate in the constant <BAUDRATE>.
  21          // 4) Open Hyperterminal, or a similar program, and connect to the target
  22          //    board's USB port (virtual com port).
  23          // 5) Download and execute code to an 'F580 target board.
  24          //
  25          //
  26          // Target:         C8051F580
  27          // Tool chain:     Keil C51 8.0 / Keil EVAL C51
  28          // Command Line:   None
  29          //
  30          // Release 1.0 / 21 JUL 2008 (ADT)
  31          //    - Initial Revision
  32          //
  33          //-----------------------------------------------------------------------------
  34          // Includes
  35          //-----------------------------------------------------------------------------
  36          
  37          #include <compiler_defs.h>
  38          #include <C8051F580_defs.h>            // SFR declarations
  39          #include <stdio.h>
  40          
  41          //-----------------------------------------------------------------------------
  42          // Global CONSTANTS
  43          //-----------------------------------------------------------------------------
  44          
  45          #define SYSCLK      24000000           // SYSCLK frequency in Hz
  46          #define BAUDRATE      115200           // Baud rate of UART in bps
  47          
  48          //-----------------------------------------------------------------------------
  49          // Function PROTOTYPES
  50          //-----------------------------------------------------------------------------
  51          
  52          void SYSCLK_Init (void);
  53          void OSCILLATOR_Init (void);
  54          void UART1_Init(void);
  55          void PORT_Init (void);
C51 COMPILER V9.60.7.0   UART                                                              01/12/2024 16:21:22 PAGE 2   

  56          void TIMER0_Init (void);
  57          void T0_Wait_ms (U8 ms);
  58          void UART1_SendByte(char data1);
  59          
  60          //-----------------------------------------------------------------------------
  61          // MAIN Routine
  62          //-----------------------------------------------------------------------------
  63          
  64          void main (void)
  65          {
  66   1      
  67   1         SFRPAGE = ACTIVE_PAGE;
  68   1      
  69   1         PCA0MD &= ~0x40;                    // Disable watchdog timer
  70   1         PORT_Init();                        // Initialize Port I/O
  71   1         //OSCILLATOR_Init();
  72   1         
  73   1         SYSCLK_Init (); 
  74   1         TIMER0_Init ();  
  75   1         //T0_Wait_ms(1);
  76   1      
  77   1              UART1_Init();
  78   1         SFRPAGE = ACTIVE2_PAGE;             // Switch page for UART1 communication
  79   1         //P2 =0;
  80   1         while (1)
  81   1         {
  82   2                      UART1_SendByte('a');
  83   2                 //P2 = ~P2 ;
  84   2      
  85   2                      T0_Wait_ms(10);
  86   2                      UART1_SendByte('b');
  87   2                      T0_Wait_ms(10);
  88   2         }
  89   1      }
  90          
  91          
  92          void UART1_SendByte(char data1) {
  93   1          // // Chờ cho đến khi TX1 Ready
  94   1          
  95   1          
  96   1          // // Đặt TI1 về 0 để chuẩn bị cho lần gửi tiếp theo
  97   1          
  98   1          // Ghi dữ liệu vào thanh ghi truyền (SBUF1)
  99   1          // while (TI1 !=0);
 100   1              // SBUF1 = 'Q';
 101   1      
 102   1              // while (!TI1);
 103   1              // TI1 = 0;
 104   1              while (!TI1);
 105   1              TI1 = 0;
 106   1              SBUF1 = (U8)data1;
 107   1      }
 108          
 109          
 110          
 111          //-----------------------------------------------------------------------------
 112          // Initialization Subroutines
 113          //-----------------------------------------------------------------------------
 114          //-----------------------------------------------------------------------------
 115          // PORT_Init
 116          //-----------------------------------------------------------------------------
 117          //
C51 COMPILER V9.60.7.0   UART                                                              01/12/2024 16:21:22 PAGE 3   

 118          // Return Value : None
 119          // Parameters   : None
 120          //
 121          // Configure the Crossbar and GPIO ports.
 122          //
 123          // P0.4   digital   push-pull    UART1 TX
 124          // P0.5   digital   open-drain   UART1 RX
 125          //
 126          //-----------------------------------------------------------------------------
 127          // void PORT_Init (void)
 128          // {
 129             // U8 SFRPAGE_save = SFRPAGE;
 130             // SFRPAGE = CONFIG_PAGE;
 131          
 132             // P0MDOUT |= 0x10;                    // Enable UART1 TX as push-pull output
 133             // P0SKIP  = 0x0F;                     // Skip to P0.4
 134          
 135             // XBR2    = 0x42;                     // Enable UART1 on P0.4(TX) and P0.5(RX)
 136                                                                                            //Enable crossbar and weak pull-ups
 137             // SFRPAGE = SFRPAGE_save;
 138          // }
 139          
 140          // void PORT_Init (void)
 141          // {
 142             // U8 SFRPAGE_save = SFRPAGE;
 143             // SFRPAGE = CONFIG_PAGE;
 144          
 145              // P2MDOUT   = 0x07;
 146                   // P0SKIP    = 0xFF;
 147                   // P1SKIP    = 0xFF;
 148          
 149               // XBR2    = 0x42;                     // Enable UART1 on P0.4(TX) and P0.5(RX)
 150                                                 // // Enable crossbar and weak pull-ups
 151             // SFRPAGE = SFRPAGE_save;
 152          // }
 153          
 154          void PORT_Init (void)
 155          {
 156   1         U8 SFRPAGE_save = SFRPAGE;
 157   1         SFRPAGE = CONFIG_PAGE;
 158   1      
 159   1         //XBR2 = 0x40;                        // Enable crossbar
 160   1         P2MDOUT = 0x03;                     // Set LED to push-pull
 161   1          P0SKIP    = 0xFF;
 162   1          P1SKIP    = 0xFF;
 163   1          XBR2      = 0x42;   
 164   1      
 165   1         SFRPAGE = SFRPAGE_save;
 166   1      }
 167          
 168          //-----------------------------------------------------------------------------
 169          // SYSCLK_Init
 170          //-----------------------------------------------------------------------------
 171          //
 172          // Return Value : None
 173          // Parameters   : None
 174          //
 175          // This routine initializes the system clock to use the internal oscillator
 176          // at its maximum frequency.
 177          // Also enables the Missing Clock Detector.
 178          //-----------------------------------------------------------------------------
 179          
C51 COMPILER V9.60.7.0   UART                                                              01/12/2024 16:21:22 PAGE 4   

 180          void SYSCLK_Init (void)
 181          {
 182   1         U8 SFRPAGE_save = SFRPAGE;
 183   1         SFRPAGE = CONFIG_PAGE;
 184   1      
 185   1         OSCICN |= 0x87;                     // Configure internal oscillator for
 186   1                                             // its maximum frequency
 187   1         RSTSRC  = 0x04;                     // Enable missing clock detector
 188   1      
 189   1         SFRPAGE = SFRPAGE_save;
 190   1      }
 191          
 192          
 193          void OSCILLATOR_Init (void)
 194          {
 195   1         U8 SFRPAGE_save = SFRPAGE;
 196   1         SFRPAGE = CONFIG_PAGE;
 197   1      
 198   1         //OSCICN = 0x86;
 199   1         OSCICN |= 0x07;
 200   1      
 201   1         SFRPAGE = SFRPAGE_save;
 202   1      }
 203          
 204          //-----------------------------------------------------------------------------
 205          // UART1_Init
 206          //-----------------------------------------------------------------------------
 207          //
 208          // Return Value : None
 209          // Parameters   : None
 210          //
 211          // Configure the UART1 using Timer1, for <BAUDRATE> and 8-N-1.
 212          //-----------------------------------------------------------------------------
 213          
 214          void UART1_Init (void)
 215          {
 216   1         U8 SFRPAGE_save = SFRPAGE;
 217   1         SFRPAGE = ACTIVE2_PAGE;
 218   1      
 219   1         SCON1 = 0x10;                       // SCON1: 8-bit variable bit rate
 220   1                                             //        level of STOP bit is ignored
 221   1                                             //        RX enabled
 222   1                                             //        ninth bits are zeros
 223   1                                             //        clear RI0 and TI0 bits
 224   1      
 225   1            TH1 = -(SYSCLK / BAUDRATE / 2);
 226   1            CKCON &= ~0x0B;                  // T1M = 1; SCA1:0 = xx
 227   1            CKCON |=  0x08;
 228   1       
 229   1         TL1 = TH1;                          // Init Timer1
 230   1         TMOD &= ~0xF0;                      // TMOD: timer 1 in 8-bit autoreload
 231   1         TMOD |=  0x20;
 232   1         TR1 = 1;                            // START Timer1
 233   1      
 234   1         TI1 = 1;                            // Indicate TX0 ready (SCON1)
 235   1      
 236   1         SFRPAGE = SFRPAGE_save;
 237   1      }
 238          
 239          void TIMER0_Init(void)
 240          {
 241   1         U8 SFRPAGE_save = SFRPAGE;
C51 COMPILER V9.60.7.0   UART                                                              01/12/2024 16:21:22 PAGE 5   

 242   1         SFRPAGE = ACTIVE_PAGE;
 243   1      
 244   1         TMOD  |= 0x01;                       // Timer0 in 16-bit mode
 245   1         ET0   = 1;                          // Timer0 interrupt enabled
 246   1         TCON  |= 0x10;                       // Timer0 ON
 247   1      
 248   1         SFRPAGE = SFRPAGE_save;
 249   1      }
 250          
 251          
 252          // 16 bit C/T 
 253          void T0_Wait_ms (U8 ms)
 254          {
 255   1         // All registers are on all pages, so no need to set SFR page
 256   1      
 257   1         TCON &= ~0x30;                      // Stop Timer0; Clear TF0
 258   1         TMOD &= ~0x0f;                      // 16-bit free run mode
 259   1         TMOD |=  0x01;
 260   1      
 261   1         CKCON |= 0x04;                      // Timer0 counts SYSCLKs
 262   1      
 263   1         while (ms) {
 264   2            TR0 = 0;                         // Stop Timer0
 265   2            TH0 = -(S8)(SYSCLK/1000 >> 8);   // Overflow in 1ms
 266   2            TL0 = -(S8)(SYSCLK/1000);
 267   2            TF0 = 0;                         // Clear overflow indicator
 268   2            TR0 = 1;                         // Start Timer0
 269   2            while (!TF0);                    // Wait for overflow
 270   2            ms--;                            // Update ms counter
 271   2         }
 272   1      
 273   1         TR0 = 0;                            // Stop Timer0
 274   1      }
 275          #if 0
              #ifdef SDCC
              
              // SDCC does not include a definition for putchar(), which is used in printf()
              // and so it is defined here.  The prototype does not need to be explicitly
              // defined because it is provided in stdio.h
              
              //-----------------------------------------------------------------------------
              // putchar
              //-----------------------------------------------------------------------------
              //
              // Return Value : None
              // Parameters   : character to send to UART
              //
              // This function outputs a character to the UART.
              //-----------------------------------------------------------------------------
              void putchar (char output)
              {
                 if (output == '\n')
                 {
                    while (!TI0);
                    TI0 = 0;
                    SBUF0 = 0x0D;
                 }
                 while (!TI0);
                 TI0 = 0;
                 SBUF0 = output;
              }
              
C51 COMPILER V9.60.7.0   UART                                                              01/12/2024 16:21:22 PAGE 6   

              // SDCC does not include a definition for getkey(), and so it is defined here
              
              //-----------------------------------------------------------------------------
              // getkey
              //-----------------------------------------------------------------------------
              //
              // Return Value : character received from UART
              // Parameters   : None
              //
              // This function returns a character received from the UART
              // Assumes SFR page has been set correctly by the application
              //-----------------------------------------------------------------------------
              U8 getkey (void)
              {
                 U8 received;
              
                 while (!RI0);                       // Wait for character to be received
                 received = SBUF0;                   // Read it
                 RI0 = 0;                            // Clear received data indicator
              
                 return received;
              }
              
              #endif
              #endif
 329          //-----------------------------------------------------------------------------
 330          // End Of File
 331          //-----------------------------------------------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    181    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
