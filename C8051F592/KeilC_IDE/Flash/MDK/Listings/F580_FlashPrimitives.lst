C51 COMPILER V9.60.7.0   F580_FLASHPRIMITIVES                                              07/17/2024 11:17:43 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE F580_FLASHPRIMITIVES
OBJECT MODULE PLACED IN .\Objects\F580_FlashPrimitives.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\User\Lib\Src\F580_FlashPrimitives.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR
                    -(..\User\Lib\Inc) DEBUG PRINT(.\Listings\F580_FlashPrimitives.lst) TABS(2) OBJECT(.\Objects\F580_FlashPrimitives.obj)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F580_FlashPrimitives.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2008 Silicon Laboratories, Inc.
   5          //
   6          // This program contains several useful utilities for writing and updating
   7          // FLASH memory.
   8          //
   9          // Target:         C8051F580
  10          // Tool chain:     Raisonance / Keil / SDCC
  11          // Command Line:   None
  12          //
  13          // Release 1.2 / 15 JAN 2015 (TP)
  14          //    -Removed SFLE bit
  15          //    -Updated FlashPrimitives functions to work if the functions are located
  16          //        in code banks other than Bank 0.
  17          //
  18          // Release 1.1 / 11 MAR 2010 (GP)
  19          //    -Tested with Raisonance
  20          //    -Updated to meet new data sheet guidelines for writing/erasing
  21          //
  22          // Release 1.0 / 23 OCT 2008 (GP)
  23          //    -Initial Revision
  24          
  25          //
  26          //-----------------------------------------------------------------------------
  27          // Includes
  28          //-----------------------------------------------------------------------------
  29          
  30          #include <compiler_defs.h>
  31          #include <c8051F580.h>
  32          #include "F580_FlashPrimitives.h"
  33          
  34          //-----------------------------------------------------------------------------
  35          // Structures, Unions, Enumerations, and Type Definitions
  36          //-----------------------------------------------------------------------------
  37          
  38          //-----------------------------------------------------------------------------
  39          // Global Constants
  40          //-----------------------------------------------------------------------------
  41          
  42          //-----------------------------------------------------------------------------
  43          // Function Prototypes
  44          //-----------------------------------------------------------------------------
  45          
  46          // FLASH read/write/erase routines
  47          U8   FLASH_ByteWrite (FLADDR addr, U8 byte);
  48          U8   FLASH_ByteRead  (FLADDR addr);
  49          U8   FLASH_PageErase (FLADDR addr);
  50          
  51          //-----------------------------------------------------------------------------
  52          // Global Variables
  53          //-----------------------------------------------------------------------------
  54          
C51 COMPILER V9.60.7.0   F580_FLASHPRIMITIVES                                              07/17/2024 11:17:43 PAGE 2   

  55          //-----------------------------------------------------------------------------
  56          // FLASH Routines
  57          //-----------------------------------------------------------------------------
  58          
  59          //-----------------------------------------------------------------------------
  60          // FLASH_ByteWrite
  61          //-----------------------------------------------------------------------------
  62          //
  63          // This routine writes <byte> to the linear FLASH address <addr>.
  64          // Linear map is decoded as follows:
  65          // Linear Address       Bank     Bank Address
  66          // ------------------------------------------------
  67          // 0x00000 - 0x07FFF    0        0x0000 - 0x7FFF
  68          // 0x08000 - 0x0FFFF    1        0x8000 - 0xFFFF
  69          // 0x10000 - 0x17FFF    2        0x8000 - 0xFFFF
  70          // 0x18000 - 0x1FFFF    3        0x8000 - 0xFFFF
  71          //
  72          // This routine conforms to the recommendations in the C8051F58x data sheet
  73          //
  74          // If the MCU is operating from the internal voltage regulator, the VDD
  75          // monitor should be set threshold and enabled as a reset source only when
  76          // writing or erasing Flash. Otherwise, it should be set to the low threshold.
  77          //
  78          // If the MCU is operating from an external voltage regulator powering VDD
  79          // directly, the VDD monitor can be set to the high threshold permanently.
  80          //-----------------------------------------------------------------------------
  81          U8 FLASH_ByteWrite (FLADDR addr, U8 byte)
  82          {
  83   1         S8 SFRPAGE_SAVE = SFRPAGE;          // Preserve SFRPAGE
  84   1         bit EA_SAVE = EA;                   // Preserve EA
  85   1         S8 PSBANK_SAVE = PSBANK;            // Preserve PSBANK
  86   1         S8 xdata * data pwrite;             // FLASH write pointer
  87   1         U8 i;
  88   1      
  89   1         EA = 0;                             // Disable interrupts
  90   1      
  91   1         SFRPAGE = ACTIVE_PAGE;
  92   1      
  93   1         if (addr < 0x8000) {               // 64K linear address
  94   2            pwrite = (S8 xdata *) addr;
  95   2            PSBANK &= ~0x30;                 // COBANK = 0x0
  96   2            PSBANK |=  0x00;
  97   2         } else if (addr < 0x10000) {        // BANK 2
  98   2            addr |= 0x8000;
  99   2            pwrite = (S8 xdata *) addr;
 100   2            PSBANK &= ~0x30;                 // COBANK = 0x1
 101   2            PSBANK |=  0x10;
 102   2         } else if (addr < 0x18000) {        // BANK 2
 103   2            addr |= 0x8000;
 104   2            pwrite = (S8 xdata *) addr;
 105   2            PSBANK &= ~0x30;                 // COBANK = 0x2
 106   2            PSBANK |=  0x20;
 107   2         } else {                            // BANK 3
 108   2            pwrite = (S8 xdata *) addr;
 109   2            PSBANK &= ~0x30;                 // COBANK = 0x3
 110   2            PSBANK |=  0x30;
 111   2         }
 112   1      
 113   1         RSTSRC = 0x00;                      // 1. Disable VDD monitor as a reset source
 114   1      
 115   1         VDM0CN = 0xA0;                      // 2. Enable VDD monitor and high threshold
 116   1      
C51 COMPILER V9.60.7.0   F580_FLASHPRIMITIVES                                              07/17/2024 11:17:43 PAGE 3   

 117   1         for (i = 0; i < 255; i++) {}        // 3. Wait for VDD monitor to stabilize
 118   1      
 119   1         if (!(VDM0CN & 0x40))               // 4. If the VDD voltage is not high
 120   1            return 0;                        //    enough don't write to Flash
 121   1      
 122   1         RSTSRC = 0x02;                      // 5. Safe to enable VDD Monitor as a
 123   1                                             //    reset source
 124   1      
 125   1                                             // 6. Enable Flash Writes
 126   1      
 127   1         FLKEY  = 0xA5;                      // Key Sequence 1
 128   1         FLKEY  = 0xF1;                      // Key Sequence 2
 129   1         PSCTL |= 0x01;                      // PSWE = 1
 130   1      
 131   1         VDM0CN = 0xA0;                      // 7. Enable VDD monitor and high threshold
 132   1      
 133   1         RSTSRC = 0x02;                      // 8. Enable VDD monitor as a reset source
 134   1      
 135   1         *pwrite = byte;                     // 9. Write the byte
 136   1      
 137   1         RSTSRC = 0x00;                      // 10. Disable the VDD monitor as reset
 138   1                                             //     source
 139   1         VDM0CN = 0x80;                      // 11. Change VDD Monitor to low threshold
 140   1         RSTSRC = 0x02;                      // 12. Re-enable the VDD monitor as a
 141   1                                             //     reset source
 142   1      
 143   1         PSCTL &= ~0x01;                     // PSWE = 0
 144   1      
 145   1         PSBANK  = PSBANK_SAVE;              // Restore PSBANK
 146   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
 147   1         EA      = EA_SAVE;                  // Restore interrupts
 148   1      
 149   1         return 1;
 150   1      }
 151          
 152          //-----------------------------------------------------------------------------
 153          // FLASH_ByteRead
 154          //-----------------------------------------------------------------------------
 155          //
 156          // This routine reads a <byte> from the linear FLASH address <addr>.
 157          //
 158          //-----------------------------------------------------------------------------
 159          U8 FLASH_ByteRead (FLADDR addr)
 160          {
 161   1         S8 SFRPAGE_SAVE = SFRPAGE;          // Preserve SFRPAGE
 162   1         bit EA_SAVE = EA;                   // Preserve EA
 163   1         S8 PSBANK_SAVE = PSBANK;            // Preserve PSBANK
 164   1         S8 code * data pread;               // FLASH read pointer
 165   1         U8 byte;
 166   1      
 167   1         EA = 0;                             // Disable interrupts
 168   1      
 169   1         SFRPAGE = ACTIVE_PAGE;
 170   1      
 171   1         if (addr < 0x8000) {               // 64K linear address
 172   2            pread = (S8 code *) addr;
 173   2            PSBANK &= ~0x30;                 // COBANK = 0x0
 174   2            PSBANK |=  0x00;
 175   2         } else if (addr < 0x10000) {        // BANK 1
 176   2            addr |= 0x8000;
 177   2            pread = (S8 code *) addr;
 178   2            PSBANK &= ~0x30;                 // COBANK = 0x1
C51 COMPILER V9.60.7.0   F580_FLASHPRIMITIVES                                              07/17/2024 11:17:43 PAGE 4   

 179   2            PSBANK |=  0x10;
 180   2         } else if (addr < 0x18000) {        // BANK 2
 181   2            addr |= 0x8000;
 182   2            pread = (S8 code *) addr;
 183   2            PSBANK &= ~0x30;                 // COBANK = 0x2
 184   2            PSBANK |=  0x20;
 185   2         } else {                            // BANK 3
 186   2            pread = (S8 code *) addr;
 187   2            PSBANK &= ~0x30;                 // COBANK = 0x3
 188   2            PSBANK |=  0x30;
 189   2         }
 190   1      
 191   1         byte = *pread;                      // Read the byte
 192   1      
 193   1         PSBANK = PSBANK_SAVE;               // Restore PSBANK
 194   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
 195   1         EA = EA_SAVE;                       // Restore interrupts
 196   1      
 197   1         return byte;
 198   1      }
 199          
 200          //-----------------------------------------------------------------------------
 201          // FLASH_PageErase
 202          //-----------------------------------------------------------------------------
 203          //
 204          // This routine erases the FLASH page containing the linear FLASH address
 205          // <addr>.
 206          //
 207          // This routine conforms to the recommendations in the C8051F50x data sheet
 208          //
 209          // If the MCU is operating from the internal voltage regulator, the VDD
 210          // monitor should be set threshold and enabled as a reset source only when
 211          // writing or erasing Flash. Otherwise, it should be set to the low threshold.
 212          //
 213          // If the MCU is operating from an external voltage regulator powering VDD
 214          // directly, the VDD monitor can be set to the high threshold permanently.
 215          //-----------------------------------------------------------------------------
 216          U8 FLASH_PageErase (FLADDR addr)
 217          {
 218   1         S8 SFRPAGE_SAVE = SFRPAGE;          // Preserve SFRPAGE
 219   1         bit EA_SAVE = EA;                   // Preserve EA
 220   1         S8 PSBANK_SAVE = PSBANK;            // Preserve PSBANK
 221   1         S8 xdata * data pwrite;             // FLASH write pointer
 222   1         U8 i;
 223   1      
 224   1         EA = 0;                             // Disable interrupts
 225   1      
 226   1         SFRPAGE = ACTIVE_PAGE;
 227   1      
 228   1         if (addr < 0x8000) {               // 64K linear address
 229   2            pwrite = (S8 xdata *) addr;
 230   2            PSBANK &= ~0x30;                 // COBANK = 0x0
 231   2            PSBANK |=  0x00;
 232   2         } else if (addr < 0x10000) {        // BANK 2
 233   2            addr |= 0x8000;
 234   2            pwrite = (S8 xdata *) addr;
 235   2            PSBANK &= ~0x30;                 // COBANK = 0x1
 236   2            PSBANK |=  0x10;
 237   2         } else if (addr < 0x18000) {        // BANK 2
 238   2            addr |= 0x8000;
 239   2            pwrite = (S8 xdata *) addr;
 240   2            PSBANK &= ~0x30;                 // COBANK = 0x2
C51 COMPILER V9.60.7.0   F580_FLASHPRIMITIVES                                              07/17/2024 11:17:43 PAGE 5   

 241   2            PSBANK |=  0x20;
 242   2         } else {                            // BANK 3
 243   2            pwrite = (S8 xdata *) addr;
 244   2            PSBANK &= ~0x30;                 // COBANK = 0x3
 245   2            PSBANK |=  0x30;
 246   2         }
 247   1      
 248   1         RSTSRC = 0x00;                      // 1. Disable VDD monitor as a reset source
 249   1      
 250   1         VDM0CN = 0xA0;                      // 2. Enable VDD monitor and high threshold
 251   1      
 252   1         for (i = 0; i < 255; i++) {}        // 3. Wait for VDD monitor to stabilize
 253   1      
 254   1         if (!(VDM0CN & 0x40))               // 4. If the VDD voltage is not high enough
 255   1            return 0;                        //    don't attempt to write to Flash
 256   1      
 257   1         RSTSRC = 0x02;                      // 5. Safe to enable VDD Monitor as a reset
 258   1                                             //    source
 259   1      
 260   1                                             // 6. Enable Flash Writes
 261   1      
 262   1         FLKEY  = 0xA5;                      // Key Sequence 1
 263   1         FLKEY  = 0xF1;                      // Key Sequence 2
 264   1         PSCTL |= 0x03;                      // PSWE = 1; PSEE = 1
 265   1      
 266   1         VDM0CN = 0xA0;                      // 7. Enable VDD monitor and high threshold
 267   1      
 268   1         RSTSRC = 0x02;                      // 8. Enable VDD monitor as a reset source
 269   1      
 270   1         *pwrite = 0;                        // 9. Initiate page erase
 271   1      
 272   1         RSTSRC = 0x00;                      // 10. Disable the VDD monitor as a reset
 273   1                                             //     source
 274   1         VDM0CN = 0x80;                      // 11. Change VDD Monitor to low threshold
 275   1         RSTSRC = 0x02;                      // 12. Re-enable the VDD monitor as a reset
 276   1      
 277   1         PSCTL &= ~0x03;                     // PSWE = 0; PSEE = 0
 278   1      
 279   1         PSBANK = PSBANK_SAVE;               // Restore PSBANK
 280   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
 281   1         EA = EA_SAVE;                       // Restore interrupts
 282   1      
 283   1         return 1;
 284   1      }
 285          
 286          
 287          //-----------------------------------------------------------------------------
 288          // End Of File
 289          //-----------------------------------------------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    673    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      25
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
C51 COMPILER V9.60.7.0   F580_FLASHPRIMITIVES                                              07/17/2024 11:17:43 PAGE 6   

   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
