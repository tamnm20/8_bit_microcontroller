C51 COMPILER V9.60.7.0   UART1                                                             07/15/2024 11:32:34 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE UART1
OBJECT MODULE PLACED IN .\Objects\uart1.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE uart1.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE ORDER DEBUG PRINT(.\Listings\ua
                    -rt1.lst) TABS(2) OBJECT(.\Objects\uart1.obj)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F580_UART1_STDIO.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2008 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // This program demonstrates how to configure the C8051F580 to use routines
  10          // in STDIO.h to write to and read from the UART interface.  The program
  11          // reads a character using the STDIO routine getkey(), outputs that character
  12          // to the screen, and then outputs the ASCII hex value of that character.
  13          //
  14          //
  15          // How To Test:
  16          //
  17          // 1) Ensure that jumpers are placed on J? of the C8051F580 target board
  18          //    that connect P0.4 to the TX signal, and P0.5 to the RX field.
  19          // 2) Connect USB cable from the development board to a PC
  20          // 3) Specify the target baudrate in the constant <BAUDRATE>.
  21          // 4) Open Hyperterminal, or a similar program, and connect to the target
  22          //    board's USB port (virtual com port).
  23          // 5) Download and execute code to an 'F580 target board.
  24          //
  25          //
  26          // Target:         C8051F580
  27          // Tool chain:     Keil C51 8.0 / Keil EVAL C51
  28          // Command Line:   None
  29          //
  30          // Release 1.0 / 21 JUL 2008 (ADT)
  31          //    - Initial Revision
  32          //
  33          //-----------------------------------------------------------------------------
  34          // Includes
  35          //-----------------------------------------------------------------------------
  36          
  37          #include <compiler_defs.h>
  38          #include <C8051F580.h>            // SFR declarations
  39          #include <stdio.h>
  40          
  41          //-----------------------------------------------------------------------------
  42          // Global CONSTANTS
  43          //-----------------------------------------------------------------------------
  44          
  45          #define SYSCLK      24000000           // SYSCLK frequency in Hz
  46          #define BAUDRATE      115200           // Baud rate of UART in bps
  47          pdata uint32_t a =9;
  48          pdata uint32_t q;
  49          data uint32_t e =9;
  50          const int h =100;
  51          int test[1000];
  52          //-----------------------------------------------------------------------------
  53          // Function PROTOTYPES
  54          //-----------------------------------------------------------------------------
C51 COMPILER V9.60.7.0   UART1                                                             07/15/2024 11:32:34 PAGE 2   

  55          
  56          void SYSCLK_Init (void);
  57          void OSCILLATOR_Init (void);
  58          void UART1_Init(void);
  59          void PORT_Init (void);
  60          void TIMER0_Init (void);
  61          void T0_Wait_ms (U8 ms);
  62          //void UART1_SendByte(char data1);
  63          //U8 UART1_Recv_1Byte (void);
  64          
  65          //-----------------------------------------------------------------------------
  66          // MAIN Routine
  67          //-----------------------------------------------------------------------------
  68          void main (void)
  69          {
  70   1        int c,d;
  71   1        uint8_t b =10;
  72   1        int *p;
  73   1        d = sizeof(p);
  74   1        c = sizeof(a);
  75   1      //   U8 inputcharacter;                  // Used to store character from UART
  76   1         SFRPAGE = ACTIVE_PAGE;
  77   1      
  78   1         PCA0MD &= ~0x40;                    // Disable watchdog timer
  79   1         PORT_Init();                        // Initialize Port I/O
  80   1         //OSCILLATOR_Init();
  81   1         SYSCLK_Init (); 
  82   1         TIMER0_Init ();  
  83   1         T0_Wait_ms(1);
  84   1      
  85   1         UART1_Init();
  86   1         SFRPAGE = ACTIVE2_PAGE;             // Switch page for UART1 communication
  87   1         //P2 =0;
  88   1          printf ("\nAddr of a: %p",&a);
  89   1          printf ("\nAddr of e: %p",&e);
  90   1          printf ("\nAddr of c: %p",&c);
  91   1          printf ("\nAddr of h: %p",&h);
  92   1          printf ("\nSize of a: %d",c);
  93   1          printf ("\nAddr of test: %p",test);
  94   1          printf ("\nSize of pointer: %d\n",d);
  95   1          for(c=0;c<50;c++){
  96   2            test[c]=c;
  97   2          }
  98   1      //    p=test;
  99   1      //    for(c=0;c<10;c++){
 100   1      //      printf ("%d ",test[c]);
 101   1      //    }
 102   1      //    printf ("\n%d",test[1000]);
 103   1      //    printf ("\n%d",test[4000]);
 104   1      //    printf ("\n%d",test[8000]);
 105   1      //    printf ("\n%d",test[8001]);
 106   1         while (1)
 107   1         {
 108   2      //    printf ("\nEnter character: ");
 109   2      //    inputcharacter = getkey ();
 110   2      //    printf ("\nCharacter entered : %c",inputcharacter);
 111   2      //    printf ("\n      Value in Hex: %bx",inputcharacter);
 112   2      //    inputcharacter = UART1_Recv_1Byte ();
 113   2      //    UART1_SendByte(inputcharacter);
 114   2          //UART1_SendByte('b');
 115   2         }
 116   1      }
C51 COMPILER V9.60.7.0   UART1                                                             07/15/2024 11:32:34 PAGE 3   

 117          
 118          
 119          //void UART1_SendByte(char data1) {
 120          //  while (!TI1);     // Chờ cho đến khi TX1 Ready
 121          //  TI1 = 0;          // Đặt TI1 về 0 để chuẩn bị cho lần gửi tiếp theo
 122          //  SBUF1 = (U8)data1;// Ghi dữ liệu vào thanh ghi truyền (SBUF1)
 123          //}
 124          
 125          //U8 UART1_Recv_1Byte (void)
 126          //{
 127          //   U8 received;
 128          
 129          //   while (!RI0);                       // Wait for character to be received
 130          //   received = SBUF0;                   // Read it
 131          //   RI0 = 0;                            // Clear received data indicator
 132          
 133          //   return received;
 134          //}
 135          
 136          //-----------------------------------------------------------------------------
 137          // Initialization Subroutines
 138          //-----------------------------------------------------------------------------
 139          //-----------------------------------------------------------------------------
 140          // PORT_Init
 141          //-----------------------------------------------------------------------------
 142          //
 143          // Return Value : None
 144          // Parameters   : None
 145          //
 146          // Configure the Crossbar and GPIO ports.
 147          //
 148          // P2.0   digital   push-pull    UART1 TX
 149          // P2.1   digital   open-drain   UART1 RX
 150          //
 151          //-----------------------------------------------------------------------------
 152          
 153           void PORT_Init (void)
 154           {
 155   1          U8 SFRPAGE_save = SFRPAGE;
 156   1          SFRPAGE = CONFIG_PAGE;
 157   1      
 158   1          P2MDOUT   |= 0x01;                  // Enable UART1 TX as push-pull output
 159   1          P0SKIP    = 0xFF;
 160   1          P1SKIP    = 0xFF;                   // Skip to P2.0
 161   1      
 162   1          XBR2    = 0x42;                     // Enable UART1 on P2.0(TX) and P2.1(RX)
 163   1                                             // // Enable crossbar and weak pull-ups
 164   1          SFRPAGE = SFRPAGE_save;
 165   1       }
 166          
 167          
 168          
 169          //-----------------------------------------------------------------------------
 170          // SYSCLK_Init
 171          //-----------------------------------------------------------------------------
 172          //
 173          // Return Value : None
 174          // Parameters   : None
 175          //
 176          // This routine initializes the system clock to use the internal oscillator
 177          // at its maximum frequency.
 178          // Also enables the Missing Clock Detector.
C51 COMPILER V9.60.7.0   UART1                                                             07/15/2024 11:32:34 PAGE 4   

 179          //-----------------------------------------------------------------------------
 180          
 181          void SYSCLK_Init (void)
 182          {
 183   1         U8 SFRPAGE_save = SFRPAGE;
 184   1         SFRPAGE = CONFIG_PAGE;
 185   1      
 186   1         OSCICN |= 0x87;                     // Configure internal oscillator for
 187   1                                             // its maximum frequency
 188   1         RSTSRC  = 0x04;                     // Enable missing clock detector
 189   1      
 190   1         SFRPAGE = SFRPAGE_save;
 191   1      }
 192          
 193          //-----------------------------------------------------------------------------
 194          // UART1_Init
 195          //-----------------------------------------------------------------------------
 196          //
 197          // Return Value : None
 198          // Parameters   : None
 199          //
 200          // Configure the UART1 using Timer1, for <BAUDRATE> and 8-N-1.
 201          //-----------------------------------------------------------------------------
 202          
 203          void UART1_Init (void)
 204          {
 205   1        U8 SFRPAGE_save = SFRPAGE;
 206   1        SFRPAGE = ACTIVE2_PAGE;
 207   1      
 208   1        SCON1 = 0x10;                       // SCON1: 8-bit variable bit rate
 209   1                                           //        level of STOP bit is ignored
 210   1                                           //        RX enabled
 211   1                                           //        ninth bits are zeros
 212   1                                           //        clear RI0 and TI0 bits
 213   1      
 214   1        TH1 = -(SYSCLK / BAUDRATE / 2);
 215   1        CKCON &= ~0x0B;                  // T1M = 1; SCA1:0 = xx
 216   1        CKCON |=  0x08;
 217   1      
 218   1        TL1 = TH1;                          // Init Timer1
 219   1        TMOD &= ~0xF0;                      // TMOD: timer 1 in 8-bit autoreload
 220   1        TMOD |=  0x20;
 221   1        TR1 = 1;                            // START Timer1
 222   1      
 223   1        TI1 = 1;                            // Indicate TX0 ready (SCON1)
 224   1      
 225   1        SFRPAGE = SFRPAGE_save;
 226   1      }
 227          
 228          void TIMER0_Init(void)
 229          {
 230   1         U8 SFRPAGE_save = SFRPAGE;
 231   1         SFRPAGE = ACTIVE_PAGE;
 232   1      
 233   1         TMOD  |= 0x01;                       // Timer0 in 16-bit mode
 234   1         ET0   = 1;                          // Timer0 interrupt enabled
 235   1         TCON  |= 0x10;                       // Timer0 ON
 236   1      
 237   1         SFRPAGE = SFRPAGE_save;
 238   1      }
 239          
 240          
C51 COMPILER V9.60.7.0   UART1                                                             07/15/2024 11:32:34 PAGE 5   

 241          // 16 bit C/T 
 242          void T0_Wait_ms (U8 ms)
 243          {
 244   1         // All registers are on all pages, so no need to set SFR page
 245   1      
 246   1         TCON &= ~0x30;                      // Stop Timer0; Clear TF0
 247   1         TMOD &= ~0x0f;                      // 16-bit free run mode
 248   1         TMOD |=  0x01;
 249   1      
 250   1         CKCON |= 0x04;                      // Timer0 counts SYSCLKs
 251   1      
 252   1         while (ms) {
 253   2            TR0 = 0;                         // Stop Timer0
 254   2            TH0 = -(S8)(SYSCLK/1000 >> 8);   // Overflow in 1ms
 255   2            TL0 = -(S8)(SYSCLK/1000);
 256   2            TF0 = 0;                         // Clear overflow indicator
 257   2            TR0 = 1;                         // Start Timer0
 258   2            while (!TF0);                    // Wait for overflow
 259   2            ms--;                            // Update ms counter
 260   2         }
 261   1      
 262   1         TR0 = 0;                            // Stop Timer0
 263   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    395    ----
   CONSTANT SIZE    =    115    ----
   XDATA SIZE       =   2002       8
   PDATA SIZE       =      8    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
